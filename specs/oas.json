{
  "components": {
    "schemas": {
      "AppGroup": {
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "preferredVersion": {
            "$ref": "#/components/schemas/AppGroupVersion"
          },
          "versions": {
            "items": {
              "$ref": "#/components/schemas/AppGroupVersion"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AppGroupVersion": {
        "properties": {
          "groupVersion": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorIndex": {
        "properties": {
          "index": {
            "format": "int64",
            "type": "integer"
          }
        },
        "title": "Wrapper for index information inside an error.",
        "type": "object"
      },
      "ErrorItem": {
        "properties": {
          "error": {
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorResponse": {
        "description": "Generic error response for REST APIs",
        "properties": {
          "code": {
            "description": "the numeric HTTP error code for the response.",
            "format": "int64",
            "type": "integer"
          },
          "details": {
            "description": "The optional details of the error response.",
            "type": "string"
          },
          "dictionary": {
            "additionalProperties": true,
            "description": "Dictionary/map of associated data/information relevant to the error.\nThe error \"message\" may contain {{name}} escapes that should be substituted\nwith information from this dictionary.",
            "type": "object"
          },
          "domain": {
            "description": "The \"domain\" for the error.  If empty, it is an EDA\ncore error.  Alternatively it can be an EDA application\n\"apiVersion\" value (e.g. interfaces.eda.nokia.com/v1alpha1)\nindicating that the error is specific to that application.\nThe domain gives the receiver information that they can use\nto help them interpret the \"internal\" error code value, or\nto find an internationalization translation for the message.",
            "type": "string"
          },
          "errors": {
            "description": "Collection of errors in cases where more than one exists. This needs to be\nflexible so we can support multiple formats",
            "items": {
              "$ref": "#/components/schemas/ErrorItem"
            },
            "type": "array"
          },
          "index": {
            "$ref": "#/components/schemas/ErrorIndex"
          },
          "internal": {
            "description": "Internal error code in cases where we don't have an array of errors",
            "format": "int64",
            "type": "integer"
          },
          "message": {
            "description": "The basic text error message for the error response.",
            "type": "string"
          },
          "ref": {
            "description": "Reference to the error source. Should typically be the URI of the request",
            "type": "string"
          },
          "type": {
            "description": "URI pointing at a document that describes the error and mitigation steps\nIf there is no document, point to the RFC for the HTTP error code",
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "K8SPatchOp": {
        "properties": {
          "from": {
            "type": "string"
          },
          "op": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {
            "type": "object"
          },
          "x-permissive": {
            "type": "boolean"
          }
        },
        "required": [
          "op",
          "path"
        ],
        "type": "object"
      },
      "OverlayState": {
        "properties": {
          "links": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoOverlayLink"
            },
            "type": "object"
          },
          "nodes": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoOverlayNode"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Patch": {
        "items": {
          "$ref": "#/components/schemas/K8SPatchOp"
        },
        "type": "array"
      },
      "Resource": {
        "properties": {
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespaced": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "boolean"
          },
          "singularName": {
            "type": "string"
          },
          "uiCategory": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceHistory": {
        "items": {
          "$ref": "#/components/schemas/ResourceHistoryEntry"
        },
        "type": "array"
      },
      "ResourceHistoryEntry": {
        "properties": {
          "author": {
            "type": "string"
          },
          "changeType": {
            "type": "string"
          },
          "commitTime": {
            "format": "date-time",
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "transactionId": {
            "format": "uint64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ResourceList": {
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "groupVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/Resource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ResourceTopology": {
        "properties": {
          "topology": {
            "$ref": "#/components/schemas/OverlayState"
          },
          "topologyMetadata": {
            "$ref": "#/components/schemas/Topology"
          }
        },
        "type": "object"
      },
      "Status": {
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/StatusDetails"
          },
          "kind": {
            "type": "string"
          },
          "string": {
            "type": "string"
          }
        },
        "title": "Status is a return value for calls that don't return other objects.",
        "type": "object"
      },
      "StatusDetails": {
        "properties": {
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoAttrMetadata": {
        "properties": {
          "type": {
            "type": "string"
          },
          "ui_description": {
            "type": "string"
          },
          "ui_description_key": {
            "type": "string"
          },
          "ui_name": {
            "type": "string"
          },
          "ui_name_key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoElemMetadata": {
        "properties": {
          "attributes": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoAttrMetadata"
            },
            "type": "object"
          },
          "schema": {
            "$ref": "#/components/schemas/TopoSchema"
          },
          "subtitle": {
            "type": "string"
          },
          "subtitle_key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoLinkEndpoint": {
        "properties": {
          "endpoint": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "node_key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoNodeGrouping": {
        "properties": {
          "group": {
            "type": "string"
          },
          "tier": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TopoOverlayEndpoint": {
        "properties": {
          "attributes": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "cr_name": {
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "overlays": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoOverlayEndpointState"
            },
            "type": "object"
          },
          "schema": {
            "$ref": "#/components/schemas/TopoSchema"
          },
          "state": {
            "format": "int64",
            "type": "integer"
          },
          "ui_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoOverlayEndpointState": {
        "properties": {
          "state": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TopoOverlayLink": {
        "properties": {
          "attributes": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "cr_name": {
            "type": "string"
          },
          "endpoint_a": {
            "$ref": "#/components/schemas/TopoLinkEndpoint"
          },
          "endpoint_a_details": {
            "$ref": "#/components/schemas/TopoOverlayEndpoint"
          },
          "endpoint_b": {
            "$ref": "#/components/schemas/TopoLinkEndpoint"
          },
          "endpoint_b_details": {
            "$ref": "#/components/schemas/TopoOverlayEndpoint"
          },
          "key": {
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "overlays": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoOverlayLinkState"
            },
            "type": "object"
          },
          "schema": {
            "$ref": "#/components/schemas/TopoSchema"
          },
          "state": {
            "format": "int64",
            "type": "integer"
          },
          "ui_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoOverlayLinkState": {
        "properties": {
          "state": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TopoOverlayNode": {
        "properties": {
          "attributes": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "badges": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "cr_name": {
            "type": "string"
          },
          "grouping": {
            "$ref": "#/components/schemas/TopoNodeGrouping"
          },
          "key": {
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "overlays": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TopoOverlayNodeState"
            },
            "type": "object"
          },
          "schema": {
            "$ref": "#/components/schemas/TopoSchema"
          },
          "state": {
            "format": "int64",
            "type": "integer"
          },
          "ui_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TopoOverlayNodeState": {
        "properties": {
          "badges": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "state": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TopoSchema": {
        "properties": {
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Topology": {
        "properties": {
          "endpoints": {
            "$ref": "#/components/schemas/TopoElemMetadata"
          },
          "group": {
            "type": "string"
          },
          "grouping": {
            "$ref": "#/components/schemas/TopoSchema"
          },
          "links": {
            "$ref": "#/components/schemas/TopoElemMetadata"
          },
          "name": {
            "type": "string"
          },
          "nodes": {
            "$ref": "#/components/schemas/TopoElemMetadata"
          },
          "ui_description": {
            "type": "string"
          },
          "ui_description_key": {
            "type": "string"
          },
          "ui_name": {
            "type": "string"
          },
          "ui_name_key": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UIResult": {
        "type": "string"
      },
      "com.nokia.eda.aifabrics.v1alpha1.Backend": {
        "description": "Backend is the Schema for the backends API",
        "properties": {
          "apiVersion": {
            "default": "aifabrics.eda.nokia.com/v1alpha1",
            "pattern": "^aifabrics\\.eda\\.nokia\\.com/v1alpha1$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The apiVersion must be set to aifabrics.eda.nokia.com/v1alpha1",
              "ui-visible-if": "false"
            }
          },
          "kind": {
            "default": "Backend",
            "pattern": "^Backend$",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-pattern-error": "The kind must be set to Backend",
              "ui-visible-if": "false"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/com.nokia.eda.aifabrics.v1alpha1.Backend_metadata"
          },
          "spec": {
            "description": "BackendSpec defines the desired state of Backend",
            "properties": {
              "asnPool": {
                "description": "Reference to an IndexAllocationPool pool to use for Autonomous System Number allocations.  Used when eBGP is configured as an underlay protocol.",
                "title": "Autonomous System Pool",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-auto-completes": [
                    {
                      "condition": "true",
                      "group": "core.eda.nokia.com",
                      "resource": "indexallocationpools",
                      "type": "gvr",
                      "version": "v1"
                    }
                  ],
                  "ui-category": "UnderlayProtocol",
                  "ui-column-span": 2,
                  "ui-order-priority": 250,
                  "ui-single-line-group": "systemasn"
                }
              },
              "gpuIsolationGroups": {
                "description": "GPU Isolation Groups are used to isolate GPU traffic over the network, GPUs in different GPU isolation groups will not be able to communicate with each other.  If all GPUs across all stripes need to be able to communicate with each other, create a single GPUIsolationGroup selecting all GPU facing interfaces.",
                "items": {
                  "properties": {
                    "interfaceSelector": {
                      "format": "labelselector",
                      "items": {
                        "type": "string"
                      },
                      "title": "Interface Selector",
                      "type": "array",
                      "x-eda-nokia-com": {
                        "ui-category": "IsolationGroup",
                        "ui-column-span": 2,
                        "ui-order-priority": 200
                      }
                    },
                    "name": {
                      "description": "Name of the IsolationGroup.",
                      "title": "Isolation Group",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-column-span": 4,
                        "ui-order-priority": 100
                      }
                    }
                  },
                  "required": [
                    "interfaceSelector",
                    "name"
                  ],
                  "type": "object"
                },
                "title": "GPU Isolation Groups",
                "type": "array",
                "x-eda-nokia-com": {
                  "ui-column-span": 4,
                  "ui-order-priority": 500
                }
              },
              "rocev2QoS": {
                "description": "Set of properties to configure the RoCEv2 QoS.",
                "properties": {
                  "ecnMaxDropProbabilityPercent": {
                    "default": 100,
                    "description": "If the queue depth is between min and max threshold then this the probability with which packets are dropped or marked.",
                    "title": "ECN Max Drop Probability Percent",
                    "type": "integer",
                    "x-eda-nokia-com": {
                      "ui-column-span": 2
                    }
                  },
                  "ecnSlopeMaxThresholdPercent": {
                    "default": 80,
                    "description": "The maximum threshold parameter for a RED-managed queue in percent. When the average queue length exceeds the max value, all packets are dropped (or marked if ECN is enabled). Mutually exclusive with min-threshold and max-threshold.",
                    "title": "ECN Max Threshold Percent",
                    "type": "integer",
                    "x-eda-nokia-com": {
                      "ui-column-span": 2,
                      "ui-single-line-group": "ecnthresholds"
                    }
                  },
                  "ecnSlopeMinThresholdPercent": {
                    "default": 5,
                    "description": "The mininum threshold parameter for a RED-managed queue in percent. When the average queue length is less than min, all packets are admitted to the queue. Mutually exclusive with min-threshold and max-threshold.",
                    "title": "ECN Min Threshold Percent",
                    "type": "integer",
                    "x-eda-nokia-com": {
                      "ui-column-span": 2,
                      "ui-single-line-group": "ecnthresholds"
                    }
                  },
                  "pfcDeadlockDetectionTimer": {
                    "default": 750,
                    "description": "Number of milliseconds during which outgoing interface is receiving pfc-pause-frames before triggering recovery-timer.",
                    "title": "PFC Deadlock Detection Timer",
                    "type": "integer",
                    "x-eda-nokia-com": {
                      "ui-column-span": 2,
                      "ui-single-line-group": "pfctimers"
                    }
                  },
                  "pfcDeadlockRecoveryTimer": {
                    "default": 750,
                    "description": "Number of milliseconds during which the pfc-pause-frames will be ignored.",
                    "title": "PFC Deadlock Recovery Timer",
                    "type": "integer",
                    "x-eda-nokia-com": {
                      "ui-column-span": 2,
                      "ui-single-line-group": "pfctimers"
                    }
                  },
                  "queueMaximumBurstSize": {
                    "default": 52110640,
                    "description": "Maximum amount of shared buffer memory available to the queue in bytes.",
                    "format": "int32",
                    "maximum": 4294967295,
                    "minimum": 0,
                    "title": "Maximum Burst Size",
                    "type": "integer",
                    "x-eda-nokia-com": {
                      "ui-column-span": 2
                    }
                  }
                },
                "required": [
                  "ecnMaxDropProbabilityPercent",
                  "ecnSlopeMaxThresholdPercent",
                  "ecnSlopeMinThresholdPercent",
                  "pfcDeadlockDetectionTimer",
                  "pfcDeadlockRecoveryTimer",
                  "queueMaximumBurstSize"
                ],
                "title": "RoCEv2 QoS",
                "type": "object",
                "x-eda-nokia-com": {
                  "ui-column-span": 2,
                  "ui-order-priority": 600
                }
              },
              "stripeConnector": {
                "description": "StripeConnector is the spine layer interconnecting multiple stripes.",
                "properties": {
                  "asnPool": {
                    "description": "Reference to an IndexAllocationPool pool to use for Autonomous System Number allocations.",
                    "title": "Autonomous System Pool",
                    "type": "string",
                    "x-eda-nokia-com": {
                      "ui-auto-completes": [
                        {
                          "condition": "true",
                          "group": "core.eda.nokia.com",
                          "resource": "indexallocationpools",
                          "type": "gvr",
                          "version": "v1"
                        }
                      ],
                      "ui-category": "UnderlayProtocol",
                      "ui-column-span": 2,
                      "ui-order-priority": 250,
                      "ui-single-line-group": "systemasn2"
                    }
                  },
                  "linkSelector": {
                    "description": "Selects TopoLinks to include in this AI Fabric, the selected TopoLinks will be used to create ISLs between the stripe connector devices and the leaf devices.",
                    "format": "labelselector",
                    "items": {
                      "type": "string"
                    },
                    "title": "Link Selector",
                    "type": "array",
                    "x-eda-nokia-com": {
                      "ui-column-span": 2,
                      "ui-order-priority": 400
                    }
                  },
                  "name": {
                    "description": "The name of the Stripe Connector.",
                    "title": "Stripe Connector Name",
                    "type": "string",
                    "x-eda-nokia-com": {
                      "ui-column-span": 4,
                      "ui-order-priority": 100,
                      "ui-unique-key": true
                    }
                  },
                  "nodeSelector": {
                    "description": "Node selector to select the nodes to be used for this stripe connector.",
                    "format": "labelselector",
                    "items": {
                      "type": "string"
                    },
                    "title": "Node Selector",
                    "type": "array",
                    "x-eda-nokia-com": {
                      "ui-column-span": 2,
                      "ui-order-priority": 300
                    }
                  },
                  "systemPoolIPV4": {
                    "description": "Reference to an IPAllocationPool used to dynamically allocate an IPv4 address to system/lo0 interfaces for the stripe connector devices.  If not specified, the system will use the default IPAllocationPool.",
                    "title": "IPv4 Pool - System IP",
                    "type": "string",
                    "x-eda-nokia-com": {
                      "ui-auto-completes": [
                        {
                          "condition": "true",
                          "group": "core.eda.nokia.com",
                          "resource": "ipallocationpools",
                          "type": "gvr",
                          "version": "v1"
                        }
                      ],
                      "ui-category": "IPPools",
                      "ui-column-span": 2,
                      "ui-order-priority": 200,
                      "ui-single-line-group": "systemasn2"
                    }
                  }
                },
                "required": [
                  "linkSelector",
                  "name",
                  "nodeSelector"
                ],
                "title": "Stripe Connector",
                "type": "object",
                "x-eda-nokia-com": {
                  "ui-column-span": 4,
                  "ui-order-priority": 400
                }
              },
              "stripes": {
                "description": "A list of stripes, stripes contain a set of nodes (rails).",
                "items": {
                  "properties": {
                    "asnPool": {
                      "description": "Optional reference to an IndexAllocationPool pool to use for Autonomous System Number allocations.  If left blank, ASN allocation will be done from the ASNAllocationRange.",
                      "title": "Autonomous System Pool",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-auto-completes": [
                          {
                            "condition": "true",
                            "group": "core.eda.nokia.com",
                            "resource": "indexallocationpools",
                            "type": "gvr",
                            "version": "v1"
                          }
                        ],
                        "ui-column-span": 2,
                        "ui-order-priority": 250,
                        "ui-single-line-group": "systemasn3"
                      }
                    },
                    "gpuVlan": {
                      "description": "The VLAN used on interfaces facing the GPU servers.",
                      "title": "GPU VLAN",
                      "type": "integer",
                      "x-eda-nokia-com": {
                        "ui-column-span": 2,
                        "ui-order-priority": 400
                      }
                    },
                    "name": {
                      "description": "The name of the Stripe.",
                      "title": "Stripe Name",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-column-span": 4,
                        "ui-order-priority": 100,
                        "ui-single-line-group": "stripename"
                      }
                    },
                    "nodeSelector": {
                      "description": "Node selector to select the nodes to be used for this stripe.",
                      "format": "labelselector",
                      "items": {
                        "type": "string"
                      },
                      "title": "Node Selector",
                      "type": "array",
                      "x-eda-nokia-com": {
                        "ui-column-span": 2,
                        "ui-order-priority": 300
                      }
                    },
                    "stripeID": {
                      "description": "Unique ID for a stripe",
                      "title": "Stripe ID",
                      "type": "integer",
                      "x-eda-nokia-com": {
                        "ui-column-span": 2,
                        "ui-order-priority": 150,
                        "ui-single-line-group": "stripename"
                      }
                    },
                    "systemPoolIPV4": {
                      "description": "Optional reference to an IPAllocationPool used to dynamically allocate an IPv4 address to system/lo0 interfaces. If left blank, system IP allocation will be done from the SystemIPV4Subnet.",
                      "title": "IPv4 Pool - System IP",
                      "type": "string",
                      "x-eda-nokia-com": {
                        "ui-auto-completes": [
                          {
                            "condition": "true",
                            "group": "core.eda.nokia.com",
                            "resource": "ipallocationpools",
                            "type": "gvr",
                            "version": "v1"
                          }
                        ],
                        "ui-category": "IPPools",
                        "ui-column-span": 2,
                        "ui-order-priority": 200,
                        "ui-single-line-group": "systemasn3"
                      }
                    }
                  },
                  "required": [
                    "gpuVlan",
                    "name",
                    "nodeSelector",
                    "stripeID"
                  ],
                  "type": "object"
                },
                "title": "Stripes",
                "type": "array",
                "x-eda-nokia-com": {
                  "ui-column-span": 4,
                  "ui-order-priority": 300
                }
              },
              "systemPoolIPV4": {
                "description": "Reference to an IPAllocationPool used to dynamically allocate an IPv4 address to system/lo0 interfaces.  If specified under the Leaf/Spine/Superspine/Borderleaf those will take precedence.",
                "title": "IPv4 Pool - System IP",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-auto-completes": [
                    {
                      "condition": "true",
                      "group": "core.eda.nokia.com",
                      "resource": "ipallocationpools",
                      "type": "gvr",
                      "version": "v1"
                    }
                  ],
                  "ui-category": "IPPools",
                  "ui-column-span": 2,
                  "ui-order-priority": 100,
                  "ui-single-line-group": "systemasn"
                }
              }
            },
            "required": [
              "gpuIsolationGroups",
              "rocev2QoS",
              "stripes"
            ],
            "title": "Specification",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 30
            }
          },
          "status": {
            "description": "BackendStatus defines the observed state of Backend",
            "properties": {
              "health": {
                "description": "Indicates the health score of the Fabric.  The health score of the Fabric is determined by the aggregate health score of the resources emited by the Fabric such as ISL, DefaultRouteReflectors etc.",
                "title": "Health",
                "type": "integer",
                "x-eda-nokia-com": {
                  "ui-visible-if": "false"
                }
              },
              "healthScoreReason": {
                "description": "Indicates the reason for the health score.",
                "title": "Health Score Reason",
                "type": "string",
                "x-eda-nokia-com": {
                  "ui-visible-if": "false"
                }
              },
              "lastChange": {
                "description": "The time when the state of the resource last changed.",
                "format": "date-time",
                "title": "Last Change",
                "type": "string"
              },
              "operationalState": {
                "description": "Operational state of the Fabric.  The operational state of the fabric is determined by monitoring the operational state of the following resources (if applicable): DefaultRouters, ISLs.",
                "title": "Operational State",
                "type": "string"
              },
              "stripeConnector": {
                "description": "Stripe connector in the Backend.",
                "properties": {
                  "name": {
                    "description": "The name of the Stripe Connector.",
                    "title": "Stripe Connector Name",
                    "type": "string"
                  },
                  "stripeConnectorNodes": {
                    "description": "List of stripe connector nodes in the Stripe.",
                    "items": {
                      "properties": {
                        "node": {
                          "description": "Name of the TopoNode.",
                          "title": "Node",
                          "type": "string"
                        },
                        "operatingSystem": {
                          "description": "Operating system running on the node.",
                          "title": "Operating System",
                          "type": "string"
                        },
                        "operatingSystemVersion": {
                          "description": "Operating system version running on the node.",
                          "title": "Operating System Version",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "title": "Leaf Nodes",
                    "type": "array"
                  }
                },
                "title": "Stripe Connector",
                "type": "object"
              },
              "stripes": {
                "description": "List of stripes in the Backend.",
                "items": {
                  "properties": {
                    "leafNodes": {
                      "description": "List of leaf nodes in the Stripe.",
                      "items": {
                        "properties": {
                          "node": {
                            "description": "Name of the TopoNode.",
                            "title": "Node",
                            "type": "string"
                          },
                          "operatingSystem": {
                            "description": "Operating system running on the node.",
                            "title": "Operating System",
                            "type": "string"
                          },
                          "operatingSystemVersion": {
                            "description": "Operating system version running on the node.",
                            "title": "Operating System Version",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "title": "Leaf Nodes",
                      "type": "array"
                    },
                    "name": {
                      "description": "The name of the Stripe.",
                      "title": "Stripe Name",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "title": "Stripes",
                "type": "array"
              }
            },
            "readOnly": true,
            "title": "Status",
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 20
            }
          }
        },
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object"
      },
      "com.nokia.eda.aifabrics.v1alpha1.BackendList": {
        "description": "BackendList is a list of backends",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/com.nokia.eda.aifabrics.v1alpha1.Backend"
            },
            "type": "array"
          },
          "kind": {
            "type": "string"
          }
        },
        "required": [
          "apiVersion",
          "kind"
        ],
        "type": "object"
      },
      "com.nokia.eda.aifabrics.v1alpha1.Backend_DeletedResourceEntry": {
        "properties": {
          "commitTime": {
            "format": "date-time",
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 50,
              "ui-title": "Commit Time",
              "ui-title-key": "commitTime"
            }
          },
          "hash": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Commit Hash",
              "ui-title-key": "commitHash"
            }
          },
          "name": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 10,
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "namespace": {
            "type": "string",
            "x-eda-nokia-com": {
              "ui-order-priority": 20,
              "ui-title": "Namespace",
              "ui-title-key": "namespace"
            }
          },
          "transactionId": {
            "format": "uint64",
            "type": "integer",
            "x-eda-nokia-com": {
              "ui-order-priority": 30,
              "ui-title": "Transaction ID",
              "ui-title-key": "transactionId"
            }
          }
        },
        "type": "object"
      },
      "com.nokia.eda.aifabrics.v1alpha1.Backend_DeletedResources": {
        "items": {
          "$ref": "#/components/schemas/com.nokia.eda.aifabrics.v1alpha1.Backend_DeletedResourceEntry"
        },
        "type": "array"
      },
      "com.nokia.eda.aifabrics.v1alpha1.Backend_metadata": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-order-priority": 40,
              "ui-title": "Annotations",
              "ui-title-key": "annotations"
            }
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "x-eda-nokia-com": {
              "ui-auto-completes": [
                {
                  "condition": "true",
                  "group": "aifabrics.eda.nokia.com",
                  "kind": "Backend",
                  "type": "label",
                  "version": "v1alpha1"
                }
              ],
              "ui-order-priority": 30,
              "ui-title": "Labels",
              "ui-title-key": "labels"
            }
          },
          "name": {
            "maxLength": 253,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 10,
              "ui-pattern-error": "A valid name is made up of one or more components where each component is separated by period characters.  Each component must start and end with a lower case alphanumeric character and the body of the component is made up of zero or more lower case alphanumeric and hyphen characters.",
              "ui-title": "Name",
              "ui-title-key": "name"
            }
          },
          "namespace": {
            "type": "string",
            "x-eda-nokia-com": {
              "immutable": true,
              "ui-order-priority": 20,
              "ui-title": "Namespace",
              "ui-title-key": "namespace"
            }
          }
        },
        "required": [
          "name",
          "namespace"
        ],
        "type": "object",
        "x-eda-nokia-com": {
          "ui-order-priority": 10,
          "ui-title": "Metadata",
          "ui-title-key": "metadata"
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "title": "AIFabrics Application APIs.",
    "version": "v1alpha1"
  },
  "openapi": "3.0.1",
  "paths": {
    "/apps/aifabrics.eda.nokia.com": {
      "get": {
        "description": "list versions available from aifabrics.eda.nokia.com",
        "operationId": "getVersionAifabricsEdaNokiaCom",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppGroup"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/aifabrics.eda.nokia.com/v1alpha1": {
      "get": {
        "description": "list resources available from aifabrics.eda.nokia.com/v1alpha1",
        "operationId": "getResourcesAifabricsEdaNokiaComV1alpha1",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/aifabrics.eda.nokia.com/v1alpha1/_ui/{pathname}": {
      "get": {
        "description": "get UI specification for aifabrics.eda.nokia.com v1alpha1",
        "operationId": "uiAifabricsEdaNokiaComV1alpha1",
        "parameters": [
          {
            "description": "pathname to the UI specification to retrieve",
            "in": "path",
            "name": "pathname",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UIResult"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/aifabrics.eda.nokia.com/v1alpha1/backends": {
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listAifabricsEdaNokiaComV1alpha1Backends",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.aifabrics.v1alpha1.BackendList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list backends",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/aifabrics.eda.nokia.com/v1alpha1/namespaces/{namespace}/backends": {
      "delete": {
        "operationId": "deleteAllAifabricsEdaNokiaComV1alpha1NamespaceBackends",
        "parameters": [
          {
            "description": "the namespace scope from which to perform the delete",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the set of CRs deleted based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.aifabrics.v1alpha1.BackendList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Delete all instances of Backend in the specified namespace.",
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "The resulting resources can optionally be a subset of the resource content by using the \"fields\" query parameter.",
        "operationId": "listAifabricsEdaNokiaComV1alpha1NamespaceBackends",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a comma-separated list of resource fields to fetch/return.  If unspecified, all fields are fetched.  If empty, only key-fields are fetched.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "an EQL \"where\" expression that will be used to filter the set of resources returned.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "a label selector string to filter the results based on CR labels",
            "in": "query",
            "name": "label-selector",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.aifabrics.v1alpha1.BackendList"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "list backends in namespace",
        "tags": [
          "apps"
        ]
      },
      "post": {
        "description": "create a Backend",
        "operationId": "createAifabricsEdaNokiaComV1alpha1NamespaceBackends",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.aifabrics.v1alpha1.Backend"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.aifabrics.v1alpha1.Backend"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/aifabrics.eda.nokia.com/v1alpha1/namespaces/{namespace}/backends/_deleted": {
      "get": {
        "operationId": "getDeletedAifabricsEdaNokiaComV1alpha1NamespaceBackends",
        "parameters": [
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.aifabrics.v1alpha1.Backend_DeletedResources"
                }
              }
            },
            "description": "Returns list of deleted resource entries"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get information about the instances of Backend that have been deleted that existed in the specified namespace.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/aifabrics.eda.nokia.com/v1alpha1/namespaces/{namespace}/backends/{name}": {
      "delete": {
        "description": "delete the specified Backend",
        "operationId": "deleteAifabricsEdaNokiaComV1alpha1NamespaceBackends",
        "parameters": [
          {
            "description": "the namespace scope from which to perform the delete",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of the Backend to delete",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "read the specified Backend.  If a git hash query parameter\nis supplied, the resource as it existed at the time of the git hash\nwill be returned. Streaming is not supported when a particular revision\nis asked for.",
        "operationId": "readAifabricsEdaNokiaComV1alpha1NamespaceBackends",
        "parameters": [
          {
            "description": "name of the Backend",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "resource content will be returned as it was at the time of this git hash",
            "in": "query",
            "name": "hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope in which to operate",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.aifabrics.v1alpha1.Backend"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "patch": {
        "description": "patch a Backend",
        "operationId": "patchAifabricsEdaNokiaComV1alpha1NamespaceBackends",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.aifabrics.v1alpha1.Backend"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      },
      "put": {
        "description": "replace a Backend",
        "operationId": "replaceAifabricsEdaNokiaComV1alpha1NamespaceBackends",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/com.nokia.eda.aifabrics.v1alpha1.Backend"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/com.nokia.eda.aifabrics.v1alpha1.Backend"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/aifabrics.eda.nokia.com/v1alpha1/namespaces/{namespace}/backends/{name}/_revs": {
      "get": {
        "operationId": "getHistoryAifabricsEdaNokiaComV1alpha1NamespaceBackends",
        "parameters": [
          {
            "description": "name of the Backend to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope from which to retrieve the result",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "maximum number of history entries to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "format": "uint64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceHistory"
                }
              }
            },
            "description": "Returns the change history of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get revision history for the specified namespaced Backend.",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/aifabrics.eda.nokia.com/v1alpha1/namespaces/{namespace}/backends/{name}/_topology": {
      "get": {
        "operationId": "getTopologyAifabricsEdaNokiaComV1alpha1NamespaceBackends",
        "parameters": [
          {
            "description": "name of the Backend to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the namespace scope from which to retrieve the result",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the type of topology to retrieve",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "childrenAndParents",
              "enum": [
                "children",
                "parents",
                "childrenAndParents",
                "dependentCrs"
              ],
              "type": "string"
            }
          },
          {
            "description": "whether to recursively build the topology to include all layers or just a single layer of the topology",
            "in": "query",
            "name": "recurse",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "client information for streaming request",
            "in": "query",
            "name": "eventclient",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stream information for streaming request",
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceTopology"
                }
              }
            },
            "description": "Returns the topology of the specified resource"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Details of an error in response to an API REST request."
          }
        },
        "summary": "Get the topology for the specified namespaced Backend.",
        "tags": [
          "apps"
        ]
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}